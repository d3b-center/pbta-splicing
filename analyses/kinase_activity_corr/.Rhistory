#### Filter to the cancer group of interest ------------------------------------
pval_geometric <- data.frame(matrix(ncol=4))
colnames(pval_geometric) <- c("short_name", "gene", "quantile", "pval")
for(i in 1:nrow(cg_gene_interest)){
# get the information of cohort of interest
short_name_interest <- cg_gene_interest[i,]$short_name
gene_of_interest <- cg_gene_interest[i,]$gene_of_interest
quantile_interest <- cg_gene_interest[i,]$percentile
# find the matching cancer group name
cancer_group_long <- short_long_match %>%
filter(short_name == short_name_interest) %>%
pull(long_name)
# find the histology associated with the cancer group of interest
cohort_df_each <- histology_df  %>%
dplyr::filter(cancer_group %in% cancer_group_long) %>%
dplyr::select(Kids_First_Biospecimen_ID, harmonized_diagnosis) %>%
dplyr::mutate(short_name = short_name_interest)
#### Handle gene expression matrix -----------------------------------
# first filter to our cohort of interest
expression_of_interest <- expression_data[,cohort_df_each$Kids_First_Biospecimen_ID]
# annotate high vs. low expression group to the samples in the cohort
expression_of_gi <- expression_of_interest[rownames(expression_of_interest) == gene_of_interest, ] %>%
t() %>% as.data.frame()
colnames(expression_of_gi) <- "gene_of_interest"
# calculate the quantile and assign groups
upper_quantile <- quantile(expression_of_gi$gene_of_interest, (1-(as.numeric(quantile_interest)/100)))
lower_quantile <- quantile(expression_of_gi$gene_of_interest, (as.numeric(quantile_interest)/100))
bs_id_quantile_df <- expression_of_gi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_of_interest >= upper_quantile ~"high",
gene_of_interest <= lower_quantile ~"low",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
dplyr::select(Kids_First_Biospecimen_ID, group) %>%
dplyr::left_join(cohort_df_each)
# subset to gene and sample of interest
expression_of_interest <- expression_data %>%
dplyr::select(bs_id_quantile_df$Kids_First_Biospecimen_ID)
#### Calculate geometric mean for markers of interest --------------------------------
# get markers of interest
markers <- pathway_df$genes %>%
str_split(",") %>% unlist() %>% unique()
# filter to only markers
expression_markers <- expression_of_interest[rownames(expression_of_interest) %in% markers,]
#calculate geometric mean
geometric_mean <- lapply(expression_markers,function(x)exp(mean(log(x)))) %>%
unlist() %>% as.data.frame()
colnames(geometric_mean) <- "geometric_mean"
# annotate the results with low vs. high group
geometric_mean <- geometric_mean %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
left_join(bs_id_quantile_df) %>%
readr::write_tsv(file.path(results_dir,
paste0("geometric_mean_of_markers_parsed_by", gene_of_interest, "_in_", short_name_interest, ".tsv")))
# get t.test results
high_exp <- geometric_mean %>% filter(group=="high") %>% dplyr::select(geometric_mean)
low_exp <- geometric_mean %>% filter(group=="low") %>% dplyr::select(geometric_mean)
pvalue <- t.test(high_exp, low_exp)$p.value
# store the results
pval_geometric[i,1] <- short_name_interest
pval_geometric[i,2] <- gene_of_interest
pval_geometric[i,3] <- quantile_interest
pval_geometric[i,4] <- pvalue
}
#### Filter to the cancer group of interest ------------------------------------
pval_geometric <- data.frame(matrix(ncol=4))
colnames(pval_geometric) <- c("short_name", "gene", "quantile", "pval")
for(i in 1:nrow(cg_gene_interest)){
# get the information of cohort of interest
short_name_interest <- cg_gene_interest[i,]$short_name
gene_of_interest <- cg_gene_interest[i,]$gene_of_interest
quantile_interest <- cg_gene_interest[i,]$percentile
# find the matching cancer group name
cancer_group_long <- short_long_match %>%
filter(short_name == short_name_interest) %>%
pull(long_name)
# find the histology associated with the cancer group of interest
cohort_df_each <- histology_df  %>%
dplyr::filter(cancer_group %in% cancer_group_long) %>%
dplyr::select(Kids_First_Biospecimen_ID, harmonized_diagnosis) %>%
dplyr::mutate(short_name = short_name_interest)
#### Handle gene expression matrix -----------------------------------
# first filter to our cohort of interest
expression_of_interest <- expression_data[,cohort_df_each$Kids_First_Biospecimen_ID]
# annotate high vs. low expression group to the samples in the cohort
expression_of_gi <- expression_of_interest[rownames(expression_of_interest) == gene_of_interest, ] %>%
t() %>% as.data.frame()
colnames(expression_of_gi) <- "gene_of_interest"
# calculate the quantile and assign groups
upper_quantile <- quantile(expression_of_gi$gene_of_interest, (1-(as.numeric(quantile_interest)/100)))
lower_quantile <- quantile(expression_of_gi$gene_of_interest, (as.numeric(quantile_interest)/100))
bs_id_quantile_df <- expression_of_gi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_of_interest >= upper_quantile ~"high",
gene_of_interest <= lower_quantile ~"low",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
dplyr::select(Kids_First_Biospecimen_ID, group) %>%
dplyr::left_join(cohort_df_each)
# subset to gene and sample of interest
expression_of_interest <- expression_data %>%
dplyr::select(bs_id_quantile_df$Kids_First_Biospecimen_ID)
#### Calculate geometric mean for markers of interest --------------------------------
# get markers of interest
markers <- pathway_df$genes %>%
str_split(",") %>% unlist() %>% unique()
# filter to only markers
expression_markers <- expression_of_interest[rownames(expression_of_interest) %in% markers,]
#calculate geometric mean
geometric_mean <- lapply(expression_markers,function(x)exp(mean(log(x)))) %>%
unlist() %>% as.data.frame()
colnames(geometric_mean) <- "geometric_mean"
# annotate the results with low vs. high group
geometric_mean <- geometric_mean %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
left_join(bs_id_quantile_df) %>%
readr::write_tsv(file.path(results_dir,
paste0("geometric_mean_of_markers_parsed_by_", gene_of_interest, "_in_", short_name_interest, ".tsv")))
# get t.test results
high_exp <- geometric_mean %>% filter(group=="high") %>% dplyr::select(geometric_mean)
low_exp <- geometric_mean %>% filter(group=="low") %>% dplyr::select(geometric_mean)
pvalue <- t.test(high_exp, low_exp)$p.value
# store the results
pval_geometric[i,1] <- short_name_interest
pval_geometric[i,2] <- gene_of_interest
pval_geometric[i,3] <- quantile_interest
pval_geometric[i,4] <- pvalue
}
readr::write_tsv(file.path(results_dir, "geometric_mean_pval_markers.tsv"))
readr::write_tsv(pval_geometric, file.path(results_dir, "geometric_mean_pval_markers.tsv"))
expression_of_interest_coding_anno <- expression_of_interest_coding %>%
tibble::rownames_to_column("symbol") %>%
dplyr::select(symbol) %>%
dplyr::mutate(eg = mapIds(org.Hs.eg.db, symbol, "ENTREZID", "SYMBOL"))
# get GSCollectionSet object
kegg_build <- buildKEGGIdx(entrezIDs = expression_of_interest_coding_anno$eg, species = "human")
# get annotation to filter out disease related
kegg_build_anno <- kegg_build@anno %>% as.data.frame() %>%
dplyr::filter(Type != "Disease") %>%
dplyr::select(c("ID", "GeneSet", "Type")) %>%
dplyr::rename(description = GeneSet, pathway=ID)
# get gene set IDs
kegg_build_genesets <- kegg_build_anno %>% pull(description)
# build df with pathways and entrezID of genes
kegg_build_genesets_list <- lapply(kegg_build_genesets, function(x){
kegg_df <- kegg_build@idx[[x]] %>% as.data.frame() %>%
mutate(description = x)
})
kegg_build_genesets_df <- do.call(rbind, kegg_build_genesets_list) %>%
dplyr::left_join(kegg_build_anno)
colnames(kegg_build_genesets_df) <- c("eg", "description", "pathway", "type")
kegg_build_genesets_df$eg <- as.character(kegg_build_genesets_df$eg)
# annotate gene symbol and ensemble IDs
kegg_build_genesets_df <-kegg_build_genesets_df %>%
dplyr::left_join(expression_of_interest_coding_anno) %>%
# filter the pathway file to contain only symbols available in expression
dplyr::filter(!is.na(symbol))
# generate a list of pathways and their matching genes for GSVA analysis
pathway_names <- kegg_build_genesets_df %>%
pull(pathway) %>% unique() %>% as.list()
pathway_list <- lapply(pathway_names, function(x){
genes <- kegg_build_genesets_df %>%
filter(pathway == x) %>%
pull(symbol) %>% unique()
return(genes)
})
names(pathway_list) <- pathway_names
View(pathway_list)
#### Calculate geometric mean for markers of interest --------------------------------
# get markers of interest
pathway_list <- pathway_df$genes %>%
str_split(",") %>% unlist() %>% unique()
#### Calculate geometric mean for markers of interest --------------------------------
# get markers of interest
pathway_list <- pathway_df$genes %>%
str_split(",")
View(pathway_list)
View(pathway_df)
#### Calculate geometric mean for markers of interest --------------------------------
# get markers of interest
pathway_list <- pathway_df$genes %>%
str_split(",")
names(pathway_list) <- pathway_df$pathway
View(pathway_list)
# calculate z score for next steps
expression_markers_log2_matrix <- as.matrix( log2(expression_markers + 1) )
# We then calculate the Gaussian-distributed scores
ssgsea_scores_each <- GSVA::gsva(expression_markers_log2_matrix,
pathway_list,
method = "ssgsea",
min.sz=5,
max.sz=500,## Arguments from OMPARE
parallel.sz = 8, # For the bigger dataset, this ensures this won't crash due to memory problems
mx.diff = TRUE,
BPPARAM=SerialParam(progressbar=T))        ## Setting this argument to TRUE computes Gaussian-distributed scores (bimodal score distribution if FALSE)
# We then calculate the Gaussian-distributed scores
ssgsea_scores_each <- GSVA::gsva(expression_markers_log2_matrix,
pathway_list,
method = "ssgsea",
min.sz=1, ## has to use 1 since this is a manual list
max.sz=500,## Arguments from OMPARE
parallel.sz = 8, # For the bigger dataset, this ensures this won't crash due to memory problems
mx.diff = TRUE,
BPPARAM=SerialParam(progressbar=T))        ## Setting this argument to TRUE computes Gaussian-distributed scores (bimodal score distribution if FALSE)
View(ssgsea_scores_each)
# arrange the group assignment matrix
bs_id_quantile_df <- bs_id_quantile_df %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
arrange(Kids_First_Biospecimen_ID)
arranged_sample_id <- bs_id_quantile_df %>%
pull(Kids_First_Biospecimen_ID)
bs_id_quantile_df <- expression_of_gi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_of_interest >= upper_quantile ~"high",
gene_of_interest <= lower_quantile ~"low",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
dplyr::select(Kids_First_Biospecimen_ID, group) %>%
dplyr::left_join(cohort_df_each) %>%
dplyr::arrange(Kids_First_Biospecimen_ID)
# subset to gene and sample of interest
expression_of_interest <- expression_data %>%
dplyr::select(bs_id_quantile_df$Kids_First_Biospecimen_ID)
# arrange the expression matrix to match design matrix
ssgsea_scores_each <- ssgsea_scores_each %>%
as.data.frame() %>%
dplyr::select(bs_id_quantile_df$Kids_First_Biospecimen_ID)
bs_id_quantile_df$group <- as.factor(bs_id_quantile_df$group)
bs_id_quantile_df$group <- relevel(bs_id_quantile_df$group, "low")
# build model matrix
mod <- model.matrix(~ bs_id_quantile_df$group)
fit <- lmFit(as.matrix(ssgsea_scores_each), mod)
library(limma)
fit <- lmFit(as.matrix(ssgsea_scores_each), mod)
fit <- eBayes(fit)
tt <- topTable(fit, coef=2, n=Inf)
# generate results with directions
ssgsea_results <- tt %>%
dplyr::mutate(direction = ifelse((logFC>0), "up", "down")) %>%
tibble::rownames_to_column("pathway") %>%
left_join(kegg_build_anno) %>%
dplyr::select(pathway, description, Type, logFC, P.Value, adj.P.Val, direction) %>%
readr::write_tsv(file.path(pval_results_dir, paste0(cg_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_interest, "_ssgsea_pval.tsv" )))
# generate results with directions
ssgsea_results <- tt %>%
dplyr::mutate(direction = ifelse((logFC>0), "up", "down")) %>%
tibble::rownames_to_column("pathway") %>%
left_join(kegg_build_anno) %>%
dplyr::select(pathway, description, Type, logFC, P.Value, adj.P.Val, direction) %>%
readr::write_tsv(file.path(results_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_ssgsea_pval.tsv" )))
ssgsea_scores_df_tidy <- data.frame()
combined_results <- data.frame()
combined_results <- bind_rows(combined_results, ssgsea_results)
### Clean scoring into tidy format
ssgsea_scores_each_df <- as.data.frame(ssgsea_scores_each) %>%
rownames_to_column(var = "pathway")
#first/last_bs needed for use in gather (we are not on tidyr1.0)
first_bs <- head(colnames(ssgsea_scores_each), n=1)
last_bs  <- tail(colnames(ssgsea_scores_each), n=1)
ssgsea_scores_each_df_tidy <- ssgsea_scores_each_df %>%
tidyr::gather(Kids_First_Biospecimen_ID, ssgsea_score, !!first_bs : !!last_bs) %>%
dplyr::select(Kids_First_Biospecimen_ID, pathway, ssgsea_score)  %>%
dplyr::left_join(kegg_build_anno) %>%
dplyr::mutate(cancer_group = cg_interest) %>%
dplyr::mutate(gene_parsed_by = gene_interest)
ssgsea_scores_each_df_tidy <- ssgsea_scores_each_df %>%
tidyr::gather(Kids_First_Biospecimen_ID, ssgsea_score, !!first_bs : !!last_bs) %>%
dplyr::select(Kids_First_Biospecimen_ID, pathway, ssgsea_score)  %>%
dplyr::left_join(kegg_build_anno) %>%
dplyr::mutate(cancer_group = short_name_interest) %>%
dplyr::mutate(gene_parsed_by = gene_of_interest)
# add group number fo the final table as well
ssgsea_scores_each_df_tidy <- ssgsea_scores_each_df_tidy %>%
dplyr::left_join(bs_id_quantile_df)
# write out individual scores
ssgsea_scores_each_df_tidy %>%
arrange(ssgsea_score, descending = F) %>%
readr::write_tsv(file.path(scores_results_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_ssgsea_scores.tsv")))
# write out individual scores
ssgsea_scores_each_df_tidy %>%
arrange(ssgsea_score, descending = F) %>%
readr::write_tsv(file.path(results_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_ssgsea_scores.tsv")))
# merge into a combined file
ssgsea_scores_df_tidy <-  bind_rows(ssgsea_scores_df_tidy , ssgsea_scores_each_df_tidy)
ssgsea_scores_df_tidy <- data.frame()
combined_results <- data.frame()
for(i in 1:nrow(cg_gene_interest)){
# get the information of cohort of interest
short_name_interest <- cg_gene_interest[i,]$short_name
gene_of_interest <- cg_gene_interest[i,]$gene_of_interest
quantile_interest <- cg_gene_interest[i,]$percentile
# find the matching cancer group name
cancer_group_long <- short_long_match %>%
filter(short_name == short_name_interest) %>%
pull(long_name)
# find the histology associated with the cancer group of interest
cohort_df_each <- histology_df  %>%
dplyr::filter(cancer_group %in% cancer_group_long) %>%
dplyr::select(Kids_First_Biospecimen_ID, harmonized_diagnosis) %>%
dplyr::mutate(short_name = short_name_interest)
#### Handle gene expression matrix -----------------------------------
# first filter to our cohort of interest
expression_of_interest <- expression_data[,cohort_df_each$Kids_First_Biospecimen_ID]
# annotate high vs. low expression group to the samples in the cohort
expression_of_gi <- expression_of_interest[rownames(expression_of_interest) == gene_of_interest, ] %>%
t() %>% as.data.frame()
colnames(expression_of_gi) <- "gene_of_interest"
# calculate the quantile and assign groups
upper_quantile <- quantile(expression_of_gi$gene_of_interest, (1-(as.numeric(quantile_interest)/100)))
lower_quantile <- quantile(expression_of_gi$gene_of_interest, (as.numeric(quantile_interest)/100))
bs_id_quantile_df <- expression_of_gi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_of_interest >= upper_quantile ~"high",
gene_of_interest <= lower_quantile ~"low",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
dplyr::select(Kids_First_Biospecimen_ID, group) %>%
dplyr::left_join(cohort_df_each) %>%
dplyr::arrange(Kids_First_Biospecimen_ID)
# subset to gene and sample of interest
expression_of_interest <- expression_data %>%
dplyr::select(bs_id_quantile_df$Kids_First_Biospecimen_ID)
#### Calculate geometric mean for markers of interest --------------------------------
# get markers of interest
pathway_list <- pathway_df$genes %>%
str_split(",")
names(pathway_list) <- pathway_df$pathway
# filter to only markers
expression_markers <- expression_of_interest[rownames(expression_of_interest) %in% markers,]
# calculate z score for next steps
expression_markers_log2_matrix <- as.matrix( log2(expression_markers + 1) )
# We then calculate the Gaussian-distributed scores
ssgsea_scores_each <- GSVA::gsva(expression_markers_log2_matrix,
pathway_list,
method = "ssgsea",
min.sz=1, ## has to use 1 since this is a manual list
max.sz=500,## Arguments from OMPARE
parallel.sz = 8, # For the bigger dataset, this ensures this won't crash due to memory problems
mx.diff = TRUE,
BPPARAM=SerialParam(progressbar=T))        ## Setting this argument to TRUE computes Gaussian-distributed scores (bimodal score distribution if FALSE)
# arrange the expression matrix to match design matrix
ssgsea_scores_each <- ssgsea_scores_each %>%
as.data.frame() %>%
dplyr::select(bs_id_quantile_df$Kids_First_Biospecimen_ID)
bs_id_quantile_df$group <- as.factor(bs_id_quantile_df$group)
bs_id_quantile_df$group <- relevel(bs_id_quantile_df$group, "low")
# build model matrix
mod <- model.matrix(~ bs_id_quantile_df$group)
fit <- lmFit(as.matrix(ssgsea_scores_each), mod)
fit <- eBayes(fit)
tt <- topTable(fit, coef=2, n=Inf)
# generate results with directions
ssgsea_results <- tt %>%
dplyr::mutate(direction = ifelse((logFC>0), "up", "down")) %>%
tibble::rownames_to_column("pathway") %>%
left_join(kegg_build_anno) %>%
dplyr::select(pathway, description, Type, logFC, P.Value, adj.P.Val, direction) %>%
readr::write_tsv(file.path(results_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_ssgsea_pval.tsv" )))
ssgsea_results <- ssgsea_results %>%
dplyr::mutate(cancer_group = short_name_interest) %>%
dplyr::mutate(gene_parsed_by = gene_of_interest) %>%
dplyr::mutate(percentile = quantile_interest)
combined_results <- bind_rows(combined_results, ssgsea_results)
### Clean scoring into tidy format
ssgsea_scores_each_df <- as.data.frame(ssgsea_scores_each) %>%
rownames_to_column(var = "pathway")
#first/last_bs needed for use in gather (we are not on tidyr1.0)
first_bs <- head(colnames(ssgsea_scores_each), n=1)
last_bs  <- tail(colnames(ssgsea_scores_each), n=1)
ssgsea_scores_each_df_tidy <- ssgsea_scores_each_df %>%
tidyr::gather(Kids_First_Biospecimen_ID, ssgsea_score, !!first_bs : !!last_bs) %>%
dplyr::select(Kids_First_Biospecimen_ID, pathway, ssgsea_score)  %>%
dplyr::left_join(kegg_build_anno) %>%
dplyr::mutate(cancer_group = short_name_interest) %>%
dplyr::mutate(gene_parsed_by = gene_of_interest)
# add group number fo the final table as well
ssgsea_scores_each_df_tidy <- ssgsea_scores_each_df_tidy %>%
dplyr::left_join(bs_id_quantile_df)
# write out individual scores
ssgsea_scores_each_df_tidy %>%
arrange(ssgsea_score, descending = F) %>%
readr::write_tsv(file.path(results_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_ssgsea_scores.tsv")))
# merge into a combined file
ssgsea_scores_df_tidy <-  bind_rows(ssgsea_scores_df_tidy , ssgsea_scores_each_df_tidy)
}
View(tt)
#### function to create barplots -------------------------------------------
pathway_barplots <- function(dat, xlab, ylab, top = 20, title){
dat <- dat %>%
dplyr::select(xlab, ylab) %>%
unique() %>%
filter(get(ylab) != 0) %>%
arrange(get(ylab), descending = FALSE) %>%
slice_head(n = top) %>%
as.data.frame()
dat <- dat %>%
mutate(log_score = (-1)*log10(get(ylab))) %>%
arrange(log_score, descending = TRUE)
dat[,xlab] <- factor(dat[,xlab], levels = unique(dat[,xlab]))
p <- ggplot(dat, aes(x = get(xlab),
y = log_score,
fill = log_score)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 P-Value") +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm")) +
ggtitle(title) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50)) +
guides(fill = "none")
return(p)
}
# plots barplot
pdf(file = file.path(plots_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_pathway_barplot.pdf" )))
p <- ggplot(ssgsea_results, aes(x = description,
y = log_score,
fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 P-Value") +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm")) +
ggtitle(paste0("Diff. Expr. Pathways by ssGSEA in \n", short_name_interest, " parsed by ", quantile_interest, " quantile \n", gene_of_interest))
print(p)
#### prepare the dataframe for plots
ssgsea_results_each <- ssgsea_results %>%
mutate(log_score = (-1)*log10(P.Value)) %>%
arrange(log_score) %>%
slice_head(n=25)
ssgsea_results_each$description <- factor(ssgsea_results_each$description, levels = ssgsea_results_each$description)
#### prepare the dataframe for plots
ssgsea_results_plot <- ssgsea_results %>%
mutate(log_score = (-1)*log10(P.Value)) %>%
arrange(log_score) %>%
slice_head(n=25)
ssgsea_results_plot$description <- factor(ssgsea_results_plot$description, levels = ssgsea_results_plot$description)
# plots barplot
pdf(file = file.path(plots_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_pathway_barplot.pdf" )))
p <- ggplot(ssgsea_results_plot, aes(x = description,
y = log_score,
fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 P-Value") +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm")) +
ggtitle(paste0("Diff. Expr. Pathways by ssGSEA in \n", short_name_interest, " parsed by ", quantile_interest, " quantile \n", gene_of_interest))
print(p)
dev.off()
View(ssgsea_results_plot)
# plots barplot
pdf(file = file.path(plots_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_pathway_barplot.pdf" )))
p <- ggplot(ssgsea_results_plot, aes(x = pathway,
y = log_score,
fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 P-Value") +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm")) +
ggtitle(paste0("Diff. Expr. Pathways by ssGSEA in \n", short_name_interest, " parsed by ", quantile_interest, " quantile \n", gene_of_interest))
print(p)
dev.off()
#### prepare the dataframe for plots
ssgsea_results_plot <- ssgsea_results %>%
mutate(log_score = (-1)*log10(P.Value)) %>%
arrange(log_score) %>%
slice_head(n=25)
ssgsea_results_plot$description <- factor(ssgsea_results_plot$description, levels = ssgsea_results_plot$description)
# plots barplot
pdf(file = file.path(plots_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_pathway_barplot.pdf" )))
p <- ggplot(ssgsea_results_plot, aes(x = pathway,
y = log_score,
fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 P-Value") +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm")) +
ggtitle(paste0("Diff. Expr. Pathways by ssGSEA in \n", short_name_interest, " parsed by ", quantile_interest, " quantile \n", gene_of_interest))
print(p)
dev.off()
View(p)
ssgsea_results_plot$pathway <- factor(ssgsea_results_plot$pathway, levels = ssgsea_results_plot$pathway)
# plots barplot
pdf(file = file.path(plots_dir, paste0(short_name_interest, "_parsed_by_", quantile_interest, "_quantile_", gene_of_interest, "_pathway_barplot.pdf" )))
p <- ggplot(ssgsea_results_plot, aes(x = pathway,
y = log_score,
fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 P-Value") +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm")) +
ggtitle(paste0("Diff. Expr. Pathways by ssGSEA in \n", short_name_interest, " parsed by ", quantile_interest, " quantile \n", gene_of_interest))
print(p)
dev.off()
histology_df <- readr::read_tsv("~/OpenPedCan-analysis/data/histologies.tsv")
see <- histology_df %>% filter(sample_id == "7316-1106")
View(see)
View(expression_markers)
rm(list=ls())
histology_df <- readr::read_tsv("../data/histologies.tsv", guess_max=10000)
getwd()
setwd("/Users/jinr/pbta-splicing/analyses/kinase_activity_corr")
